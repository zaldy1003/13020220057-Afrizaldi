package main;

import java.beans.Statement;
import javax.swing.table.DefaultTableModel;
import main.koneksi;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.util.concurrent.ExecutionException;
import javax.swing.JOptionPane;


/**
 *
 * @author GF63
 */
public class dataSiswa extends javax.swing.JFrame {
    private java.sql.Connection connection = koneksi.DBConnection();
    private PreparedStatement statement;
    private java.sql.Connection con= koneksi.DBConnection();
    private PreparedStatement stm;
    DefaultTableModel t = new DefaultTableModel(new String[]{"Nama","Kelas","Jurusan"},0);
    
     public void isiNama(String nama) {
        String sql = "INSERT INTO siswa (namaSiswa) VALUES(?)";
        try (PreparedStatement stm = (PreparedStatement)con.prepareStatement(sql)) {
            stm.setString(1, nama);
            stm.executeUpdate();
        } catch (SQLException exc) {
            System.out.println("Gagal Memasukkan data pada table siswa: " + exc.getMessage());
        }
    }
    
     public void isiKelas(String kelas) {
        String nama = namaField.getText();
        int idSiswa = getIdSiswa(nama);
        String sql = "INSERT INTO kelas (namaKelas, idsiswa) VALUES(?, ?)";
        try (PreparedStatement stmt = (PreparedStatement)con.prepareStatement(sql)) {
            stmt.setString(1, kelas);
            stmt.setInt(2, idSiswa);
            stmt.executeUpdate();
        } catch (SQLException exc) {
            System.out.println("Gagal Memasukkan data pada table kelas: " + exc.getMessage());
        }
    }
    
    public void isiJurusan(int idSiswa, int idKelas, String jurusan) {
        String sql = "INSERT INTO jurusan (idSiswa, idKelas, namaJurusan) VALUES(?, ?, ?)";
        try (PreparedStatement stmt =(PreparedStatement) connection.prepareStatement(sql)) {
            stmt.setInt(1, idSiswa);
            stmt.setInt(2, idKelas);
            stmt.setString(3, jurusan);
            stmt.executeUpdate();
        } catch (SQLException exc) {
            System.out.println("Gagal Memasukkan data pada table jurusan: " + exc.getMessage());
        }
    }
    
    public void tampildata() {
        try {
            t.setRowCount(0);
            Table.setModel(t);
            String sql = "SELECT siswa.namaSiswa, kelas.namaKelas, jurusan.namaJurusan FROM jurusan "
                       + "JOIN siswa ON jurusan.idSiswa = siswa.idSiswa "
                       + "JOIN kelas ON jurusan.idKelas = kelas.idKelas";
            try (PreparedStatement stmt = (PreparedStatement) connection.prepareStatement(sql);
                 ResultSet res = stmt.executeQuery()) {
                while (res.next()) {
                    String namaSiswa = res.getString("namaSiswa");
                    String Kelas = res.getString("namaKelas");
                    String Jurusan = res.getString("namaJurusan");

                    t.addRow(new Object[]{namaSiswa, Kelas, Jurusan});
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private int getIdSiswa(String nama) {
        String sql = "SELECT idSiswa FROM siswa WHERE namaSiswa = ?";
        try (PreparedStatement stmt =(PreparedStatement) connection.prepareStatement(sql)) {
            stmt.setString(1, nama);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("idSiswa");
                }
            }
        } catch (SQLException exc) {
            System.out.println("Gagal mendapatkan idSiswa: " + exc.getMessage());
        }
        return -1;
    }
    
    private int getIdKelas(String kelas) {
        String sql = "SELECT idKelas FROM kelas WHERE namaKelas = ?";
        try (PreparedStatement stmt = (PreparedStatement)connection.prepareStatement(sql)) {
            stmt.setString(1, kelas);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("idKelas");
                }
            }
        } catch (SQLException exc) {
            System.out.println("Gagal mendapatkan idKelas: " + exc.getMessage());
        }
        return -1;
    }
    
    public dataSiswa() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        namaField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        kelasField = new javax.swing.JComboBox<>();
        jurusanField = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        Tambah = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Hapus = new javax.swing.JButton();
        cari = new javax.swing.JButton();
        cariField = new javax.swing.JTextField();
        refresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Data Siswa");

        jLabel2.setText("Nama:");

        namaField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Kelas:");

        jLabel4.setText("Jurusan:");

        kelasField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A1", "A2", "A3", "B1", "B2", "B3" }));

        jurusanField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Farmasi", "Dokter", "Ilmu Komputer", "Teknik Industri", "Teknik Elektro", " " }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(namaField)
                    .addComponent(kelasField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jurusanField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(namaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kelasField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jurusanField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        Tambah.setText("Tambah");
        Tambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TambahActionPerformed(evt);
            }
        });

        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Hapus.setText("Hapus");
        Hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HapusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Tambah, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Hapus, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Tambah, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Hapus, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        cari.setText("Cari");
        cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cariActionPerformed(evt);
            }
        });

        cariField.setText("Cari");

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 866, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(139, 139, 139))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cariField, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cari, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cariField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cari, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                        .addComponent(refresh, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void namaFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namaFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namaFieldActionPerformed

    private void TambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TambahActionPerformed

        String nama = namaField.getText();
        String kelas = kelasField.getSelectedItem().toString();
        String jurusan = jurusanField.getSelectedItem().toString();
        try {
            isiNama(nama);
            isiKelas(kelas);
            int idSiswa = getIdSiswa(nama);
            int idKelas = getIdKelas(kelas);
            if (idSiswa != -1 && idKelas != -1) {
                isiJurusan(idSiswa, idKelas, jurusan);
                JOptionPane.showMessageDialog(null, "Berhasil ditambahkan", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Gagal mendapatkan ID yang diperlukan", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception exc) {
            System.out.println("Gagal Memasukkan data: " + exc.getMessage());
        }
    }//GEN-LAST:event_TambahActionPerformed

    public void cariData(String nama) {
        String sql = "SELECT siswa.namaSiswa, kelas.namaKelas, jurusan.namaJurusan FROM jurusan "
                   + "JOIN siswa ON jurusan.idSiswa = siswa.idSiswa "
                   + "JOIN kelas ON jurusan.idKelas = kelas.idKelas "
                   + "WHERE siswa.namaSiswa = ?";
        try (PreparedStatement stmt =(PreparedStatement) connection.prepareStatement(sql)) {
            stmt.setString(1, nama);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    namaField.setText(rs.getString("namaSiswa"));
                    kelasField.setSelectedItem(rs.getString("namaKelas"));
                    jurusanField.setSelectedItem(rs.getString("namaJurusan"));
                } else {
                    JOptionPane.showMessageDialog(null, "Data tidak ditemukan", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException exc) {
            System.out.println("Gagal mencari data: " + exc.getMessage());
        }
    }
    
    public int cariIdSiswa(String nama) {
        String sql = "select idsiswa from siswa where namasiswa=?";
        int idSiswa=-1;
        try (PreparedStatement stmt =(PreparedStatement) connection.prepareStatement(sql)) {
            stmt.setString(1, nama);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    idSiswa = rs.getInt("idsiswa"); // Mendapatkan nilai idsiswa
                } else {
                    JOptionPane.showMessageDialog(null, "Data tidak ditemukan", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException exc) {
            System.out.println("Gagal mencari data: " + exc.getMessage());
        }
        return idSiswa;
    }

    public void updateData(String oldNama, String newNama, String newKelas, String newJurusan) {
        try {
        connection.setAutoCommit(false); // Mulai transaksi

        // Update siswa
        String sqlSiswa = "UPDATE siswa SET namaSiswa = ? WHERE namaSiswa = ?";
        try (PreparedStatement stmtSiswa =(PreparedStatement) connection.prepareStatement(sqlSiswa)) {
            stmtSiswa.setString(1, newNama);
            stmtSiswa.setString(2, oldNama);
            stmtSiswa.executeUpdate();
        }

        // Mendapatkan idSiswa dan idKelas yang relevan
        int idSiswa = getIdSiswa(newNama);
        int idKelas = getIdKelas(newKelas);

        // Update kelas
        if (idSiswa != -1 && idKelas != -1) {
            String sqlKelas = "UPDATE kelas k JOIN jurusan j ON k.idKelas = j.idKelas SET k.namaKelas = ? WHERE j.idSiswa = ?";
            try (PreparedStatement stmtKelas = (PreparedStatement)connection.prepareStatement(sqlKelas)) {
                stmtKelas.setString(1, newKelas);
                stmtKelas.setInt(2, idSiswa);
                stmtKelas.executeUpdate();
            }

            // Update jurusan
            String sqlJurusan = "UPDATE jurusan SET namaJurusan = ? WHERE idSiswa = ? AND idKelas = ?";
            try (PreparedStatement stmtJurusan = (PreparedStatement) connection.prepareStatement(sqlJurusan)) {
                stmtJurusan.setString(1, newJurusan);
                stmtJurusan.setInt(2, idSiswa);
                stmtJurusan.setInt(3, idKelas);
                stmtJurusan.executeUpdate();
            }

            connection.commit(); // Commit transaksi jika semua update berhasil
            JOptionPane.showMessageDialog(null, "Data berhasil diupdate", "Informasi", JOptionPane.INFORMATION_MESSAGE);
        } else {
            connection.rollback(); // Rollback transaksi jika terjadi kesalahan
            JOptionPane.showMessageDialog(null, "Gagal mendapatkan ID yang diperlukan", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException exc) {
        try {
            connection.rollback(); // Rollback transaksi jika terjadi kesalahan
        } catch (SQLException e) {
            System.out.println("Gagal rollback: " + e.getMessage());
        }
        System.out.println("Gagal mengupdate data: " + exc.getMessage());
    } finally {
        try {
            connection.setAutoCommit(true); // Kembali ke mode auto-commit
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }
    
    private void CariActionPerformed(java.awt.event.ActionEvent evt) {
        String nama = cariField.getText();
        cariData(nama);
    }
    
    
    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
    String oldNama = cariField.getText(); // Nama yang dicari dan ingin diupdate
    String newNama = namaField.getText(); // Nama baru (diambil dari namaField)
    String newKelas = kelasField.getSelectedItem().toString(); // Kelas baru (diambil dari kelasField)
    String newJurusan = jurusanField.getSelectedItem().toString(); // Jurusan baru (diambil dari jurusanField)

    updateData(oldNama, newNama, newKelas, newJurusan);
    tampildata(); // Refresh data di tabel
    }//GEN-LAST:event_UpdateActionPerformed
    
    
    public void hapusNamaSiswa(String nama){
        String sql = "delete from siswa where namasiswa=?";
        try (PreparedStatement stmt =(PreparedStatement) connection.prepareStatement(sql)) {
            stmt.setString(1, nama);
            int count = stmt.executeUpdate();
            if (count > 0) {
                JOptionPane.showMessageDialog(null, "Data berhasil dihapus", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                tampildata(); // Refresh table after deletion
            } else {
                JOptionPane.showMessageDialog(null, "Gagal menghapus data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException exc) {
        System.out.println("Gagal menghapus data: " + exc.getMessage());
    }
    }
    
    public void hapusNamaSiswaKelas(String nama){
        int idSiswa= cariIdSiswa(nama);
        String sql= "select namakelas from kelas where idsiswa=?";
        try{PreparedStatement stmt = (PreparedStatement) connection.prepareStatement(sql);
            stmt.setInt(1, idSiswa);
            int count = stmt.executeUpdate();
            if (count > 0) {
                JOptionPane.showMessageDialog(null, "Data berhasil dihapus", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                tampildata(); // Refresh table after deletion
            } else {
                JOptionPane.showMessageDialog(null, "Gagal menghapus data", "Error", JOptionPane.ERROR_MESSAGE);
        }
        }catch(Exception exc){
            System.out.println("Gagal menghapus data: " + exc.getMessage());
        }
    }
    
    private void HapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HapusActionPerformed
    String nama = cariField.getText();
    int idSiswa = cariIdSiswa(nama);
        String sql = "DELETE FROM jurusan WHERE idsiswa = ?";
    try (PreparedStatement stmt =(PreparedStatement) connection.prepareStatement(sql)) {
        stmt.setInt(1, idSiswa);
        int count = stmt.executeUpdate();
        if (count > 0) {
            hapusNamaSiswa(nama);
            hapusNamaSiswaKelas(nama);
            JOptionPane.showMessageDialog(null, "Data berhasil dihapus", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            tampildata(); // Refresh table after deletion
        } else {
            JOptionPane.showMessageDialog(null, "Gagal menghapus data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException exc) {
        System.out.println("Gagal menghapus data: " + exc.getMessage());
    }
    }//GEN-LAST:event_HapusActionPerformed

    private void cariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cariActionPerformed
        String nama = cariField.getText();
        String sql = "SELECT siswa.namaSiswa, kelas.namaKelas, jurusan.namaJurusan FROM jurusan "
               + "JOIN siswa ON jurusan.idSiswa = siswa.idSiswa "
               + "JOIN kelas ON jurusan.idKelas = kelas.idKelas "
               + "WHERE siswa.namaSiswa = ?";
    try (PreparedStatement stmt =(PreparedStatement) connection.prepareStatement(sql)) {
        stmt.setString(1, nama);
        try (ResultSet rs = stmt.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) Table.getModel();
            model.setRowCount(0); // Clear existing rows
            
            while (rs.next()) {
                String namaSiswa = rs.getString("namaSiswa");
                String namaKelas = rs.getString("namaKelas");
                String namaJurusan = rs.getString("namaJurusan");
                
                model.addRow(new Object[]{namaSiswa, namaKelas, namaJurusan});
            }
        }
    } catch (SQLException exc) {
        System.out.println("Gagal mencari data: " + exc.getMessage());
    }
    
    }//GEN-LAST:event_cariActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        tampildata();
    }//GEN-LAST:event_refreshActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dataSiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dataSiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dataSiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dataSiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dataSiswa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Hapus;
    private javax.swing.JTable Table;
    private javax.swing.JButton Tambah;
    private javax.swing.JButton Update;
    private javax.swing.JButton cari;
    private javax.swing.JTextField cariField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jurusanField;
    private javax.swing.JComboBox<String> kelasField;
    private javax.swing.JTextField namaField;
    private javax.swing.JButton refresh;
    // End of variables declaration//GEN-END:variables
}
